plugins {
    id 'java'
    id 'application'
}

allprojects {
    group = 'org.neutron'
    version = '1.0.0'
    
    repositories {
        mavenCentral()
        maven { url 'https://repo1.maven.org/maven2/' }
    }
}

subprojects {
    apply plugin: 'java-library'
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    dependencies {
        testImplementation 'junit:junit:4.13.2'
    }
}

// Main application configuration
application {
    mainClass = 'org.neutron.app.Main'
    applicationDefaultJvmArgs = ['-Djava.awt.headless=false']
}

// Dependencies for the main application
dependencies {
    implementation project(':neutron-cldc')
    implementation project(':neutron-midp')
    implementation project(':neutron-javase')
    implementation project(':neutron-javase-swing')
}

// Create version file for the About menu
task createVersionFile {
    doLast {
        def versionFile = file("${sourceSets.main.output.resourcesDir}/META-INF/Neutron-build.version")
        versionFile.parentFile.mkdirs()
        versionFile.text = """build.version=${version}
build.buildNum=${System.getenv('BUILD_NUMBER') ?: '1'}
"""
    }
}

// Create a fat JAR with all dependencies
jar {
    dependsOn subprojects*.jar, createVersionFile
    
    // Use clean version for the JAR name
    archiveFileName = "neutron-${version}.jar"
    
    manifest {
        attributes 'Main-Class': 'org.neutron.app.Main'
    }
    
    // Include all classes from subprojects
    from project(':neutron-javase-swing').sourceSets.main.output
    from project(':neutron-javase').sourceSets.main.output
    from project(':neutron-midp').sourceSets.main.output
    from project(':neutron-cldc').sourceSets.main.output
    
    // Include all runtime dependencies
    from {
        configurations.runtimeClasspath.collect { 
            it.isDirectory() ? it : zipTree(it) 
        }
    }
    
    // Exclude unnecessary files to reduce size
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/versions/**'
    exclude 'module-info.class'
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to run the application
task runNeutron(type: JavaExec) {
    group = 'application'
    description = 'Run the Neutron Java ME emulator'
    mainClass = 'org.neutron.app.Main'
    classpath = project(':neutron-javase-swing').sourceSets.main.runtimeClasspath
    workingDir = projectDir
    dependsOn ':neutron-javase-swing:build'
}

// Alternative run task that uses the application plugin
run {
    classpath = project(':neutron-javase-swing').sourceSets.main.runtimeClasspath
    dependsOn ':neutron-javase-swing:build'
}
